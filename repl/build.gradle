import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*
import org.jooq.meta.*


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jooq:jooq-meta:$jooqVersion"
        classpath "org.jooq:jooq-codegen:$jooqVersion"

        // make extra-libs available to the build system as well
        classpath fileTree(dir: 'extra-libs', includes: ['*.jar'])
    }
}

plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '4.0.2'
}
subprojects {
  apply plugin: 'java'

  repositories {
    jcenter()
  }
}

repositories {
  jcenter()
}

sourceCompatibility = '1.11'

dependencies {
  compile project(":evaluator")
  compile "io.vertx:vertx-core:$vertxVersion"
  compile "io.vertx:vertx-web:$vertxVersion"
}

mainClassName = 'co.petrin.WebInterface'

shadowJar {
  classifier = 'fat'
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

run {
  // Development configuration, assumes a Postgres 10 database running on the local machine
  classpath += files('../postgres/postgresql-9.1-901-1.jdbc4.jar', '../postgres/sakila-postgres.jar')
  environment([
        DATABASE_POSTGRES_DESCRIPTION : 'Latest postgres database image',
        DATABASE_POSTGRES_URL : 'jdbc:postgresql://localhost:5432/sakila',
        DATABASE_POSTGRES_USER : 'postgres',
        DATABASE_POSTGRES_PASSWORD : '',
        DATABASE_POSTGRES_JOOQ_PACKAGE : 'sakila',
  ])
}

task('runFromDocker', type: JavaExec, description: 'Main entry point for docker containers') {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    classpath += fileTree("$projectDir/extra-libs")
}

task('jooqModels', description: "Generate jOOQ schemas for any databases configured to do so") {

    def databases = System.getenv()
        .keySet()
        .findAll { it.startsWith("DATABASE_") && it.endsWith("_URL") }
        .collect { it.substring(9, it.length() - "_URL".length()) }
        .findAll { System.getenv("DATABASE_${it}_BUILD_MODEL") }
    onlyIf { databases.size() > 0 }

    doLast {
        databases.forEach { database ->
            println "Generating jOOQ model for configuration $database"
            def config = new org.jooq.meta.jaxb.Configuration()
                .withJdbc(new Jdbc()
                    .withUrl(System.getenv("DATABASE_${database}_URL"))
                    .withUser(System.getenv("DATABASE_${database}_USER"))
                    .withPassword(System.getenv("DATABASE_${database}_PASSWORD"))
                    .withSchema("public")
                )
                .withGenerator(new Generator()
                    .withGenerate(new Generate()
                        .withDeprecated(false)
                        .withValidationAnnotations(false)
                        .withGeneratedAnnotation(false)
                    )
                    .withTarget(new Target()
                        .withPackageName(System.getenv("DATABASE_${database}_JOOQ_PACKAGE"))
                        .withDirectory("${projectDir}/evaluator/build/generated/java")
                    )
                    .withDatabase(new Database()
                        //.withName('org.jooq.meta.postgres.PostgresDatabase')
                        //.withIncludeExcludeColumns(true)
                    )
                )
            GenerationTool.generate(config)
        }
    }
}

tasks.compileJava.dependsOn 'jooqModels'