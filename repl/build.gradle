

buildscript {
    project.ext.jooqVersion = System.getenv("REPL_JOOQ_VERSION") ?: "3.11.9"
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jooq:jooq-meta:$jooqVersion"
        classpath "org.jooq:jooq-codegen:$jooqVersion"
        
        // required for codegen, at least under newer Java versions
        // https://stackoverflow.com/questions/51916221/javax-xml-bind-jaxbexception-implementation-of-jaxb-api-has-not-been-found-on-mo
        classpath('javax.xml.bind:jaxb-api:2.3.0')
        classpath('javax.activation:activation:1.1')
        classpath('org.glassfish.jaxb:jaxb-runtime:2.3.0')

        // make extra-libs available to the build system as well
        classpath fileTree(dir: 'extra-libs', includes: ['*.jar'])
    }
}

plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '4.0.2'
}

apply from: 'typescript.gradle'

subprojects {
  apply plugin: 'java'

  repositories {
    jcenter()
  }
}
apply plugin: 'groovy' // required for Spock tests only

repositories {
  jcenter()
}

sourceCompatibility = '1.11'

dependencies {
  compile project(":evaluator")
  compile "io.vertx:vertx-core:$vertxVersion"
  compile "io.vertx:vertx-web:$vertxVersion"

    // Spock & testcontainers
    testCompile "org.codehaus.groovy:groovy-all:2.4.15"
    testCompile "org.spockframework:spock-core:1.2-groovy-2.4"
    testCompile "org.testcontainers:testcontainers:1.10.6"
    testCompile 'io.vertx:vertx-web-client:3.6.3'
}

mainClassName = 'co.petrin.WebInterface'

shadowJar {
  classifier = 'fat'
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

run {
  // Development configuration, assumes a Postgres 10 database running on the local machine
  classpath += files('../postgres/postgresql-9.1-901-1.jdbc4.jar', '../postgres/sakila-postgres.jar')
  environment([
        DATABASE_POSTGRES_DESCRIPTION : 'Latest postgres database image',
        DATABASE_POSTGRES_URL : 'jdbc:postgresql://localhost:5432/sakila',
        DATABASE_POSTGRES_USER : 'postgres',
        DATABASE_POSTGRES_PASSWORD : '',
        DATABASE_POSTGRES_SCRIPT_PREFIX : 'import static org.jooq.impl.DSL.*; import org.jooq.impl.DSL; import static sakila.default_schema.Tables.*;',
        DATABASE_POSTGRES_SANDBOXING_HOST_AND_PORT : 'localhost:5432',
        EVALUATOR_CLASSPATH: "$buildDir/evaluatorRuntime $projectDir/../postgres"
  ])
}

task('runFromDocker', type: JavaExec, description: 'Main entry point for docker containers') {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

task copyEvaluatorDependencies(type: Copy, description: "Copies Evaluator's dependencies into a directory so it can be included into remote Evaluators' classpaths") {
	from project(":evaluator").sourceSets.main.runtimeClasspath
	into "$buildDir/evaluatorRuntime/"
}

tasks.compileJava.dependsOn copyEvaluatorDependencies

test {
    // Make it easier to find the Dockerfile in tests
    systemProperties.projectDir = projectDir
    systemProperties['vertx.disableDnsResolver'] = true
}


task('jooqModels', description: "Generate jOOQ schemas for any databases configured to do so") {

    def databases = System.getenv()
        .keySet()
        .findAll { it.startsWith("DATABASE_") && it.endsWith("_URL") }
        .collect { it.substring(9, it.length() - "_URL".length()) }
        .findAll { System.getenv("DATABASE_${it}_GENERATE_JOOQ_PACKAGE") }
    onlyIf { databases.size() > 0 }

    doLast {
        databases.forEach { database ->
            println "Generating jOOQ model for configuration $database"
            def config = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd">
                    <!-- Configure the database connection here -->
                    <jdbc>
                        <url>${System.getenv("DATABASE_${database}_URL")}</url>
                        <user>${System.getenv("DATABASE_${database}_USER")}</user>
                        <password>${System.getenv("DATABASE_${database}_PASSWORD")}</password>
                    </jdbc>

                    <generator>
                        <database>
                            <includes>.*</includes>
                        </database>

                        <target>
                            <packageName>${System.getenv("DATABASE_${database}_GENERATE_JOOQ_PACKAGE")}</packageName>

                            <!-- The destination directory of your generated classes -->
                            <directory>${projectDir}/evaluator/build/generated/java</directory>
                        </target>
                    </generator>
                </configuration>
            """.stripIndent()
            println "Configuration is:\n"+config
            org.jooq.codegen.GenerationTool.generate(config)
        }
    }
}

tasks.compileJava.dependsOn 'jooqModels'
